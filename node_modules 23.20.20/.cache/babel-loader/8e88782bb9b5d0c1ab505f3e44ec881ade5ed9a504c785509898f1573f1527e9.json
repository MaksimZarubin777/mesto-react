{"ast":null,"code":"var _jsxFileName = \"/Users/maksim/Desktop/dev/mesto-react/mesto-react/src/components/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport '../index.css';\nimport Header from './Header.js';\nimport Main from './Main.js';\nimport PopupWithForm from './PopupWithForm';\nimport Footer from './Footer.js';\nimport ImagePopup from './ImagePopup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  console.log('это App');\n  //  переменные состояния, отвечающие за видимость трёх попапов\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false);\n\n  // стейт-переменная для попап с картинкой\n  const [selectedCard, setSelectedCard] = useState(null);\n\n  // стейт переменная для инпутов\n  const [formInput, setFormInput] = useState({\n    profileName: '',\n    profileDescription: '',\n    placeName: '',\n    placeLink: '',\n    avatarLink: ''\n  });\n\n  // изменение значения состояния попапа профиль\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n  ;\n\n  // изменение значения состояния попапа место\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n\n  // изменение значения состояния попапа аватар\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n\n  // клик по карточке\n  function handleCardClick(card) {\n    setSelectedCard(card);\n  }\n\n  // вводим инпуты - берем предыдущее значение всех инпутов, через таргет определяем инпут, его атрибут name - это ключ, значением становится то, что введено\n  function handleInput(evt) {\n    setFormInput(previousInputs => ({\n      ...previousInputs,\n      [evt.target.name]: evt.target.value\n    }));\n  }\n\n  // закрываем попапы\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setSelectedCard(null);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        onEditProfile: handleEditProfileClick,\n        onAddPlace: handleAddPlaceClick,\n        onEditAvatar: handleEditAvatarClick,\n        onCardClick: handleCardClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Em9eZqDO0n6yFbOMEpmM1hcEjMs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Header","Main","PopupWithForm","Footer","ImagePopup","jsxDEV","_jsxDEV","App","_s","console","log","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","selectedCard","setSelectedCard","formInput","setFormInput","profileName","profileDescription","placeName","placeLink","avatarLink","handleEditProfileClick","handleAddPlaceClick","handleEditAvatarClick","handleCardClick","card","handleInput","evt","previousInputs","target","name","value","closeAllPopups","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onEditProfile","onAddPlace","onEditAvatar","onCardClick","_c","$RefreshReg$"],"sources":["/Users/maksim/Desktop/dev/mesto-react/mesto-react/src/components/App.js"],"sourcesContent":["import { useState } from 'react';\nimport '../index.css';\nimport Header from './Header.js';\nimport Main from './Main.js';\nimport PopupWithForm from './PopupWithForm';\nimport Footer from './Footer.js';\nimport ImagePopup from './ImagePopup';\n\nfunction App() {\n  console.log('это App')\n  //  переменные состояния, отвечающие за видимость трёх попапов\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false);\n\n  // стейт-переменная для попап с картинкой\n  const [selectedCard, setSelectedCard] = useState(null);\n\n  // стейт переменная для инпутов\n  const [formInput, setFormInput] = useState({\n    profileName: '',\n    profileDescription: '',\n    placeName: '',\n    placeLink: '',\n    avatarLink: ''\n  });\n\n  // изменение значения состояния попапа профиль\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  };\n\n  // изменение значения состояния попапа место\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n\n  // изменение значения состояния попапа аватар\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n\n  // клик по карточке\n  function handleCardClick(card) {\n    setSelectedCard(card)\n  }\n\n  // вводим инпуты - берем предыдущее значение всех инпутов, через таргет определяем инпут, его атрибут name - это ключ, значением становится то, что введено\n  function handleInput(evt) {\n    setFormInput(previousInputs => ({...previousInputs, [evt.target.name]: evt.target.value}))\n  }\n\n  // закрываем попапы\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setSelectedCard(null)\n  }\n\n  return (\n    <div className=\"body\">\n      <div className=\"page\">\n        <Header />\n        <Main \n          onEditProfile={handleEditProfileClick}\n          onAddPlace={handleAddPlaceClick} \n          onEditAvatar={handleEditAvatarClick}\n          onCardClick={handleCardClick} />\n\n        {/* попап профиль */}\n        {/* <PopupWithForm \n          name='profile' \n          title='Редактировать профиль' \n          isOpen={isEditProfilePopupOpen} \n          onClose={closeAllPopups}>\n          <input \n            id=\"profile-name\" \n            name=\"profileName\" \n            placeholder=\"Ваше имя\" \n            type=\"text\" \n            value={formInput.profileName} \n            onChange={handleInput}\n            className=\"popup__input\" \n            required \n            minLength=\"2\" \n            maxLength=\"20\" />\n          <span className=\"popup__input-error\" id=\"profile-name-text-error\"></span>\n          <input \n            id=\"profile-job\" \n            name=\"profileDescription\" \n            placeholder=\"Расскажите о себе\" \n            type=\"text\" \n            value={formInput.profileDescription}\n            onChange={handleInput}\n            className=\"popup__input\" \n            required \n            minLength=\"2\" \n            maxLength=\"200\" />\n          <span className=\"popup__input-error\" id=\"profile-job-text-error\"></span>\n        </PopupWithForm> */}\n\n        {/* попап место */}\n        {/* <PopupWithForm \n          name='place' \n          title='Новое место' \n          isOpen={isAddPlacePopupOpen} \n          onClose={closeAllPopups}>\n            <input \n              id=\"place-name\" \n              name=\"placeName\" \n              placeholder=\"Название\" \n              type=\"text\" \n              value={formInput.placeName}\n              onChange={handleInput} \n              className=\"popup__input\" \n              required \n              minLength=\"2\" \n              maxLength=\"200\" />\n            <span className=\"popup__input-error\" id=\"place-name-text-error\"></span>\n            <input \n              id=\"place-img\" \n              name=\"placeLink\" \n              placeholder=\"Ссылка на картинку\" \n              type=\"url\" \n              value={formInput.placeLink}\n              onChange={handleInput}\n              className=\"popup__input\" \n              required />\n            <span className=\"popup__input-error\" id=\"place-img-text-error\"></span>\n        </PopupWithForm> */}\n\n        {/* попап аватар */}\n        {/* <PopupWithForm \n          name='avatar' \n          title='Обновить аватар' \n          isOpen={isEditAvatarPopupOpen} \n          onClose={closeAllPopups}>\n            <input \n              id=\"avatar-img\" \n              name=\"avatarLink\" \n              placeholder=\"Ссылка на картинку\" \n              type=\"url\" \n              value={formInput.avatarLink}\n              onChange={handleInput}\n              className=\"popup__input\" \n              required />\n            <span className=\"popup__input-error\" id=\"avatar-img-text-error\"></span>\n        </PopupWithForm> */}\n\n        {/* попап картинка */}\n        {/* <ImagePopup card={selectedCard} onClose={closeAllPopups} /> */}\n        <Footer /> \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}